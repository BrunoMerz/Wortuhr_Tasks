/**
   MyWifi.cpp
   @autor    Bruno Merz
*/

#include "esp_wps.h"
#include "WiFi.h"
#include "ESPAsyncWebServer.h"
#include "ESPAsyncWiFiManager.h"
#include <ElegantOTA.h>

#include "MyWifi.h"
#include "Configuration.h"
//#include "esp_task_wdt.h"

#define myDEBUG
#include "MyDebug.h"

//#include "MyTFT.h"
//#include "TFTImageRenderer.h"
#include "IconRenderer.h"
#include "Settings.h"


#define ESP_WPS_MODE      WPS_TYPE_PBC
#define ESP_MANUFACTURER  "ESPRESSIF"
#define ESP_MODEL_NUMBER  "ESP32"
#define ESP_MODEL_NAME    "ESPRESSIF IOT"
#define ESP_DEVICE_NAME   "ESP STATION"


static boolean  _wpsSuccess;
static boolean  _got_ip;
static int      _wifi_stat;

#if defined(LILYGO_T_HMI)
static MyTFT *tft = MyTFT::getInstance();
static TFTImageRenderer *ir = TFTImageRenderer::getInstance();
#endif

static AsyncWebServer server(80);
static DNSServer dns;

static IconRenderer *icor = IconRenderer::getInstance();
static AsyncWiFiManager wifiManager(&server, &dns); // global wm instance
static Settings *settings = Settings::getInstance();


static esp_wps_config_t config;

String wpspin2string(uint8_t a[]) {
  char wps_pin[9];
  for(int i=0;i<8;i++){
    wps_pin[i] = a[i];
  }
  wps_pin[8] = '\0';
  return (String)wps_pin;
}

void wpsStop(void) {
    if(esp_wifi_wps_disable()){
      DEBUG_PRINTLN("WPS Disable Failed");
    }
}

boolean wpsStart(void) {
  _wpsSuccess=false;
  if(esp_wifi_wps_enable(&config)) {
    DEBUG_PRINTLN("WPS Enable Failed");
  } else if(esp_wifi_wps_start(0)) {
    DEBUG_PRINTLN("WPS Start Failed");
  } else
    DEBUG_PRINTLN("esp_wifi_wps_start OK");

  for (int i = 0; i < WPSTIMEOUT ; i++) {
    if (WiFi.status() == WL_CONNECTED)
    {
      DEBUG_PRINTLN("WPS WiFi connected");
      _wpsSuccess=true;
      break;
    }
    vTaskDelay(pdMS_TO_TICKS(1000));
    DEBUG_PRINTF("Waiting for IP, i=%d\n",i);
  }
  if(!_wpsSuccess) {
    DEBUG_PRINTLN("WPS WiFi failed");
    wpsStop();
  }
  return _wpsSuccess;
}


void WiFiEvent(WiFiEvent_t event, arduino_event_info_t info){
  switch(event){
    case ARDUINO_EVENT_WIFI_STA_START:
      DEBUG_PRINTLN("Station Mode Started");
      break;
    case ARDUINO_EVENT_WIFI_STA_GOT_IP:
      DEBUG_PRINTLN("Connected to :" + String(WiFi.SSID()));
      DEBUG_PRINT("GOT_IP: ");
      DEBUG_PRINTLN(WiFi.localIP().toString());
      _got_ip = true;
      break;
    case ARDUINO_EVENT_WIFI_STA_DISCONNECTED:
      DEBUG_PRINTLN("Disconnected from station, attempting reconnection");
      WiFi.reconnect();
      break;
    case ARDUINO_EVENT_WPS_ER_SUCCESS:
      DEBUG_PRINTLN("WPS Successfull, stopping WPS and connecting to: " + String(WiFi.SSID()));
      wpsStop();
      vTaskDelay(pdMS_TO_TICKS(10));
      WiFi.begin();
      break;
    case ARDUINO_EVENT_WPS_ER_FAILED:
      DEBUG_PRINTLN("WPS Failed, retrying");
      wpsStop();
      wpsStart();
      break;
    case ARDUINO_EVENT_WPS_ER_TIMEOUT:
      DEBUG_PRINTLN("WPS Timedout, retrying");
      wpsStop();
      wpsStart();
      break;
    case ARDUINO_EVENT_WPS_ER_PIN:
      DEBUG_PRINTLN("WPS_PIN = " + wpspin2string(info.wps_er_pin.pin_code));
      break;
    default:
      break;
  }
}


void wpsInitConfig(){
  config.wps_type = ESP_WPS_MODE;
  strcpy(config.factory_info.manufacturer, ESP_MANUFACTURER);
  strcpy(config.factory_info.model_number, ESP_MODEL_NUMBER);
  strcpy(config.factory_info.model_name, ESP_MODEL_NAME);
  strcpy(config.factory_info.device_name, ESP_DEVICE_NAME);
}

MyWifi* MyWifi::instance = 0;

MyWifi *MyWifi::getInstance() {
  if (!instance)
  {
      instance = new MyWifi();
  }
  return instance;
}

MyWifi::MyWifi(void) {

}

/**
   Callback function that indicates that the ESP has switched to AP mode
*/
void MyWifi::configModeCallback (AsyncWiFiManager *myWiFiManager) {
  DEBUG_PRINTLN("Entered configModeCallback");
  icor->renderAndDisplay("/ico/accesspoint.ico",0,1);
#if defined(LILYGO_T_HMI)
  ir->renderAndDisplayPNG("/tft/accesspoint.png",0,1);
#endif
  DEBUG_PRINTLN(WiFi.softAPIP()); //imprime o IP do AP
  DEBUG_PRINTLN(myWiFiManager->getConfigPortalSSID());
}

/**
   Callback function that indicates that the ESP has saved the settings
*/
void MyWifi::saveConfigCallback (void) {
  DEBUG_PRINTLN("Enter saveConfigCallback");
  //DEBUG_PRINTLN(WiFi.softAPIP()); //imprime o IP do AP
}


bool MyWifi::myStartWPS(void) {
  DEBUG_PRINTLN("WPS Konfiguration gestartet");
  _wpsSuccess = true;
  WiFi.onEvent(WiFiEvent);
  WiFi.mode(WIFI_MODE_STA);
  DEBUG_PRINTLN("Starting WPS");
  wpsInitConfig();
  DEBUG_PRINTLN("Config done");
  wpsStart();

  return _wpsSuccess;
}

/**
   Initialize
*/
void MyWifi::init(void) {
#if defined(myDEBUG)
  // Enable debug output 
  DEBUG_PRINTLN("setDebugOutput to true");
  wifiManager.setDebugOutput(true);
#else
  wifiManager.setDebugOutput(false);
#endif

  /**
     Set Callback Funktion for accesspoint konfiguration
  */
  wifiManager.setAPCallback(configModeCallback);

  /**
      Callback Funktion after connecting to a network
  */
  wifiManager.setSaveConfigCallback(saveConfigCallback);
  
  WiFi.setHostname(settings->mySettings.systemname);
  _connected = false;
}


/**
   resets network settings and restarts ESP
*/
void MyWifi::doReset(void) {
  DEBUG_PRINTLN("MyWifi::doReset called");
  settings->mySettings.ssid[0]='\0';
  settings->mySettings.passwd[0]='\0';
  settings->saveToNVS();
  wifiManager.resetSettings();
  ESP.restart();
}

/**
   connects to a network
*/
bool MyWifi::myBegin(char *ssid, char *passwd) {
  int ret;
  int timeout;
  //station_config sc;
  _ssid=ssid;
  _passwd=passwd;
  DEBUG_PRINTF("_connected=%d, _ssid=%s, _passwd=%s\n", _connected, _ssid.c_str(), _passwd.c_str());
  if(_connected)
    return true;

#if defined(myDEBUG)
  // Enable debug output
  DEBUG_PRINTLN("setDebugOutput to true");
  wifiManager.setDebugOutput(true);
#else
  wifiManager.setDebugOutput(false);
#endif

  WiFi.onEvent(WiFiEvent);
  _got_ip=false;

  if(_ssid.length() && _passwd.length()) {
    icor->renderAndDisplay(F("/ico/wifi.ico"),0,1);
#if defined(LILYGO_T_HMI)
    ir->renderAndDisplayPNG("/tft/wifi.png",0,1);
#endif
    timeout = WIFITIMEOUT;
  } else {
    Serial.println(F("Starting WPS"));
    icor->renderAndDisplay("/ico/wps.ico",0,1);
#if defined(LILYGO_T_HMI)
    ir->renderAndDisplayPNG("/tft/wps.png",0,1);
#endif
    timeout = WPSTIMEOUT;
    WiFi.mode(WIFI_STA);
    if(myStartWPS()) {
      DEBUG_PRINTF("myBegin: WPS successfull, ssid=%s, passwd=%s\n",WiFi.SSID().c_str(), WiFi.psk().c_str());
      _ssid = WiFi.SSID();
      _passwd = WiFi.psk();
      saveSSIDandPWD();
      ESP.restart();
    }
  }

  int16_t i=0;
  DEBUG_PRINTF("pass=%s\n",_passwd.c_str());
  if (_passwd.length() > 0) {
    int j=0;
    _wifi_stat = -1;
    if(WiFi.isConnected()) {
      WiFi.disconnect();
      i=0;

      while(i++ < 10 && _wifi_stat != SYSTEM_EVENT_STA_DISCONNECTED) {
        DEBUG_PRINTLN("Warten auf disconnect");
        vTaskDelay(pdMS_TO_TICKS(100));
      }
    }

    while(!_got_ip) {
      _wifi_stat = -1;
      DEBUG_PRINTLN("vor WiFi.begin");

      WiFi.begin(_ssid, _passwd);
      i=0;
      while(i++ < timeout && !_got_ip) {
        // Warten auf connect oder timeout
#ifdef myDEBUG
        DEBUG_PRINTF("_wifi_stat=%d, i=%d\n", _wifi_stat, i);
#endif
        vTaskDelay(pdMS_TO_TICKS(1000));
        if(digitalRead(WIFI_RESET)) {
          doReset();
        }
      }
    }
  }
  else {
    timeout = WIFITIMEOUT;
    icor->renderAndDisplay("/ico/accesspoint.ico",0,1);
#if defined(LILYGO_T_HMI)
    ir->renderAndDisplayPNG("/tft/accesspoint.png",0,1);
#endif
    DEBUG_PRINTF("setConfigPortalTimeout timeout=%i\n", timeout);
    Serial.println(F("Starting Accesspoint"));
    wifiManager.setConfigPortalTimeout(timeout);
    //wifiManager.setMinimumSignalQuality(20);
    wifiManager.setConnectTimeout(timeout);
    ret = wifiManager.startConfigPortal(settings->mySettings.systemname);
    DEBUG_PRINTF("After setConfigPortalTimeout timeout=%i\n", timeout);
    i=0;
    while(i++ < timeout && !_got_ip) {
      Serial.printf("While %i\n", i);
      //vTaskDelay(pdMS_TO_TICKS(1000));
      delay(1000);
      //esp_task_wdt_reset();
    }
  }

  if (!_got_ip) {
    DEBUG_PRINTLN("Failed to connect, remove WiFi Settings");
    DEBUG_FLUSH();
    //system_restore();
    ESP.restart();
    return false;
  } else {
    DEBUG_PRINTLN("Got connection");
    //WiFi.config(INADDR_NONE,INADDR_NONE,INADDR_NONE,INADDR_NONE);
    
    WiFi.setAutoReconnect(true);
    WiFi.persistent(true);
    icor->renderAndDisplay("/ico/check.ico",3000,1);

#if defined(LILYGO_T_HMI)
    ir->renderAndDisplayPNG("/tft/check.png",0,1);
#endif

    _ssid=WiFi.SSID();
    _passwd=WiFi.psk();
    saveSSIDandPWD();

    _ip = WiFi.localIP();
    DEBUG_PRINTF("myBegin: ssid=%s, passwd=%s, ip=%s\n",_ssid.c_str(), _passwd.c_str(),_ip.toString().c_str());
    _connected = true;
    return true;
  }
}

bool MyWifi::isConnected(void) {
  return _connected;
}

void MyWifi::saveSSIDandPWD(void) {
   DEBUG_PRINTLN("saveSSIDandPWD called");
   if(_ssid != String(settings->mySettings.ssid) || _passwd != String(settings->mySettings.passwd)) {
      strncpy(settings->mySettings.ssid, _ssid.c_str(), sizeof(settings->mySettings.ssid));
      strncpy(settings->mySettings.passwd, _passwd.c_str(), sizeof(settings->mySettings.passwd));
      settings->saveToNVS();
   }
}

AsyncWebServer *MyWifi::getServer(void) {
  return &server;
}